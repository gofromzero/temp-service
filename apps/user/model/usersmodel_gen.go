// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	usersFieldNames          = builder.RawFieldNames(&Users{})
	usersRows                = strings.Join(usersFieldNames, ",")
	usersRowsExpectAutoSet   = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	usersRowsWithPlaceHolder = strings.Join(stringx.Remove(usersFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheTestUsersIdPrefix       = "cache:test:users:id:"
	cacheTestUsersUsernamePrefix = "cache:test:users:username:"
)

type (
	usersModel interface {
		Insert(ctx context.Context, data *Users) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Users, error)
		FindOneByUsername(ctx context.Context, username string) (*Users, error)
		Update(ctx context.Context, newData *Users) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUsersModel struct {
		sqlc.CachedConn
		table string
	}

	Users struct {
		Id        int64  `db:"id"`         // 会员资料自增id
		Username  string `db:"username"`   // 用户名 手机号注册
		Password  string `db:"password"`   // 用户密码
		Salt      string `db:"salt"`       // 盐
		Nickname  string `db:"nickname"`   // 昵称
		ImgUrl    string `db:"img_url"`    // 头像
		Sex       int64  `db:"sex"`        // 性别，0，保密；1，男；2，女
		Birthday  int64  `db:"birthday"`   // 生日日期
		Disabled  int64  `db:"disabled"`   // 是否禁用 0-可用 1-禁用
		RegTime   int64  `db:"reg_time"`   // 注册时间
		UpdatedAt int64  `db:"updated_at"` // 最后一次登录时间
		DeletedAt int64  `db:"deleted_at"` // 删除时间
	}
)

func newUsersModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUsersModel {
	return &defaultUsersModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`users`",
	}
}

func (m *defaultUsersModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	testUsersIdKey := fmt.Sprintf("%s%v", cacheTestUsersIdPrefix, id)
	testUsersUsernameKey := fmt.Sprintf("%s%v", cacheTestUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, testUsersIdKey, testUsersUsernameKey)
	return err
}

func (m *defaultUsersModel) FindOne(ctx context.Context, id int64) (*Users, error) {
	testUsersIdKey := fmt.Sprintf("%s%v", cacheTestUsersIdPrefix, id)
	var resp Users
	err := m.QueryRowCtx(ctx, &resp, testUsersIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) FindOneByUsername(ctx context.Context, username string) (*Users, error) {
	testUsersUsernameKey := fmt.Sprintf("%s%v", cacheTestUsersUsernamePrefix, username)
	var resp Users
	err := m.QueryRowIndexCtx(ctx, &resp, testUsersUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", usersRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUsersModel) Insert(ctx context.Context, data *Users) (sql.Result, error) {
	testUsersIdKey := fmt.Sprintf("%s%v", cacheTestUsersIdPrefix, data.Id)
	testUsersUsernameKey := fmt.Sprintf("%s%v", cacheTestUsersUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, usersRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.Password, data.Salt, data.Nickname, data.ImgUrl, data.Sex, data.Birthday, data.Disabled, data.RegTime, data.UpdatedAt, data.DeletedAt)
	}, testUsersIdKey, testUsersUsernameKey)
	return ret, err
}

func (m *defaultUsersModel) Update(ctx context.Context, newData *Users) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	testUsersIdKey := fmt.Sprintf("%s%v", cacheTestUsersIdPrefix, data.Id)
	testUsersUsernameKey := fmt.Sprintf("%s%v", cacheTestUsersUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, usersRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Salt, newData.Nickname, newData.ImgUrl, newData.Sex, newData.Birthday, newData.Disabled, newData.RegTime, newData.UpdatedAt, newData.DeletedAt, newData.Id)
	}, testUsersIdKey, testUsersUsernameKey)
	return err
}

func (m *defaultUsersModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTestUsersIdPrefix, primary)
}

func (m *defaultUsersModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", usersRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUsersModel) tableName() string {
	return m.table
}
